#+TITLE: Pipeline & Peril - Game Rules
#+AUTHOR: Jason Walsh
#+DESCRIPTION: Complete rulebook for Pipeline & Peril board game

* Objective

Build a resilient distributed system that can handle incoming traffic while defending against The Static's chaos.

* Setup

1. Place the game board in the center
2. Each player takes a character board (Developer, Architect, Data Engineer, or DevOps)
3. Create dice pools:
   - Resource pool: 10d6 per player
   - Chaos pool: 5d8
   - Traffic pool: 10d10
4. Shuffle event cards

* Turn Structure

** Phase 1: Traffic Generation
- Roll 2d10 to determine incoming requests
- Distribute load tokens across services

** Phase 2: Player Actions (3 actions each)
- *Build*: Add a new service tile (cost: 2 actions)
- *Connect*: Create network paths between services (cost: 1 action)
- *Allocate*: Assign d6 resource dice to services (cost: 1 action)
- *Debug*: Remove bugs from services (roll d20 vs bug's d4 severity)
- *Scale*: Add capacity to existing service (cost: varies)

** Phase 3: Resolution
- Each service must roll d20 â‰¥ (load - allocated resources) or fail
- Failed services cascade failures to dependencies
- Roll d12 for each network hop to determine latency

** Phase 4: Chaos
- Roll d8 on chaos table
- Apply effects (network partitions, CPU spikes, disk failures, etc.)
- Spawn bugs on affected services

* Winning Conditions

** Cooperative Mode
Survive 10 rounds with system uptime >80%

** Competitive Mode
Score points for handled requests minus penalties for failures

* Character Abilities

| Character     | Special Ability                        |
|---------------+----------------------------------------|
| Developer     | Reroll failed service checks once per turn |
| Architect     | Create redundant paths for free        |
| Data Engineer | Reduce latency by one step             |
| DevOps        | Ignore one chaos event per round       |

* Advanced Rules

** Service Types
Each service type has unique properties:

*** Compute Services
- Base capacity: 3
- Can scale horizontally
- Vulnerable to CPU spikes

*** Database Services  
- Base capacity: 2
- Provide persistence
- Vulnerable to disk failures

*** Cache Services
- Base capacity: 4
- Reduce latency by 1
- Volatile (lost on failure)

*** Queue Services
- Base capacity: 5
- Buffer overflow protection
- Vulnerable to backpressure

** Cascade Failure Rules

When a service fails:
1. All dependent services receive +2 load
2. If dependency is critical, dependent services auto-fail
3. Failures propagate until no new services fail

** Latency Calculation

Total latency = Sum of all d12 rolls for network hops

| Latency | Effect                |
|---------+-----------------------|
| 1-3     | Fast (no penalty)     |
| 4-6     | Normal (-1 to next action) |
| 7-9     | Slow (-2 to next action) |
| 10-12   | Timeout (request fails) |