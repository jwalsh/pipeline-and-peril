#+AUTHOR: Jason Walsh
#+DESCRIPTION: A board game teaching distributed systems concepts through RPG dice mechanics

[[https://github.com/jwalsh/pipeline-and-peril][https://img.shields.io/badge/GitHub-pipeline--and--peril-181717.svg?logo=github]]
[[https://github.com/jwalsh/pipeline-and-peril/blob/main/LICENSE][https://img.shields.io/badge/License-MIT-yellow.svg]]
[[https://github.com/jwalsh/pipeline-and-peril/issues][https://img.shields.io/github/issues/jwalsh/pipeline-and-peril.svg]]
[[https://github.com/jwalsh/pipeline-and-peril/stargazers][https://img.shields.io/github/stars/jwalsh/pipeline-and-peril.svg?style=social]]
[[https://github.com/jwalsh/pipeline-and-peril/network/members][https://img.shields.io/github/forks/jwalsh/pipeline-and-peril.svg?style=social]]

[[https://img.shields.io/badge/Type-Board_Game-blue.svg]]
[[https://img.shields.io/badge/Category-Educational-green.svg]]
[[https://img.shields.io/badge/Theme-Distributed_Systems-purple.svg]]
[[https://img.shields.io/badge/Mechanics-Dice_Rolling-orange.svg]]
[[https://img.shields.io/badge/Status-In_Development-red.svg]]

* Pipeline & Peril üé≤

/Build resilient distributed systems while battling entropy in this educational board game/

[[https://img.shields.io/badge/Players-2--4-blue.svg]]
[[https://img.shields.io/badge/Time-45--90min-green.svg]]
[[https://img.shields.io/badge/Age-14+-orange.svg]]
[[https://img.shields.io/badge/Complexity-Medium-yellow.svg]]

** Overview

Pipeline & Peril transforms complex distributed systems concepts into engaging tabletop gameplay. Players construct and maintain services while defending against "The Static" - the embodiment of system entropy and chaos.

Using polyhedral RPG dice to simulate real-world computing challenges, players learn about:
- Service architecture and dependencies
- Load balancing and traffic management
- Cascading failures and resilience patterns
- Debugging and incident response
- Chaos engineering principles

** PyGame Implementation

The game is now available as a fully playable PyGame implementation with autonomous AI players and visual interface.

*** Screenshots

**** Game Start with Dice Panel
[[file:digital/pygame/screenshots/pipeline_peril_01_game_start_20250910_192403.png]]

The game begins with each player deploying their initial load balancer. The new *Dice Rolls* panel (left) shows the current roll and history, honoring the game's origin from RustCon 2025 dice.

**** Traffic Phase with 2d10 Roll  
[[file:digital/pygame/screenshots/pipeline_peril_02_dice_traffic_20250910_192403.png]]

Traffic phase showing "2d10: 4" dice roll generating incoming requests. The hexagonal grid displays services with color-coded states. Player strategies: Aggressive (Red), Defensive (Blue), Balanced (Green), Random (Yellow).

**** Action Phase Decisions
[[file:digital/pygame/screenshots/pipeline_peril_03_action_phase_20250910_192403.png]]

Players deploy, repair, and scale services during the action phase. Services show their type icons (LB, CO, DB, CA, QU, GW) and owner colors.

**** Cascade Failure with d20 Check
[[file:digital/pygame/screenshots/pipeline_peril_04_cascade_failure_20250910_192403.png]]

Resolution phase showing cascade failure checks. The d20 roll determines if failures cascade to connected services (roll ‚â§ 8 triggers cascade).

**** Chaos Event with d8 Roll
[[file:digital/pygame/screenshots/pipeline_peril_05_chaos_event_20250910_192403.png]]

High entropy (8/10) triggers chaos events. The "1d8: 8" roll determines which system-wide disruption occurs (datacenter outage in this case). Failed services shown in red.

**** Late Game Complexity
[[file:digital/pygame/screenshots/pipeline_peril_06_late_game_20250910_192403.png]]

Complex late-game state with 20+ services deployed across the hexagonal grid. The dice history panel shows the progression of rolls throughout the game, making the RNG transparent to players.

*** Running the Game

#+begin_src bash
cd digital/pygame

# Run autonomous games for analysis
uv run python scripts/run_autonomous.py --games 10 --verbose

# Generate screenshots (works headless or with display)
uv run python scripts/screenshot_generator.py --headless

# Run with visual interface
uv run python scripts/run_autonomous.py --visual --games 1
#+end_src

*** Game Features

- *4 AI Strategies*: Aggressive, Defensive, Balanced, Random
- *6 Service Types*: Compute, Database, Cache, Queue, Load Balancer, API Gateway  
- *Real-time Visualization*: Hexagonal grid with service states and connections
- *Performance Analytics*: Win rates, uptime statistics, service deployment patterns
- *Chaos Events*: 8 different system-wide disruptions
- *Autonomous Play*: Run 1000+ games for statistical analysis
- *Dice-based Mechanics*: 2d10 traffic, d20 cascade checks, d8 chaos events

** Game Flow

*** Turn Structure
Pipeline & Peril follows a structured 4-phase turn system:

#+begin_src mermaid
graph LR
    subgraph "Game Round"
        T[1. TRAFFIC<br/>Roll 2d10] --> A[2. ACTION<br/>3 actions/player]
        A --> R[3. RESOLUTION<br/>Check cascades]
        R --> C[4. CHAOS<br/>Roll d8 if entropy‚â•3]
        C --> T
    end
    
    T -.->|Generate<br/>requests| Traffic{{2-20 requests}}
    A -.->|Players choose| Actions{{Deploy/Repair/Scale}}
    R -.->|Roll d20| Cascades{{Failure spread}}
    C -.->|Trigger| Events{{8 chaos types}}
#+end_src

Or as a more detailed state diagram:

#+begin_src mermaid
stateDiagram-v2
    [*] --> Traffic: New Round
    
    Traffic --> Action: Process Requests
    note left of Traffic
        Roll 2d10 for traffic
        Route through load balancers
        Accumulate service load
    end note
    
    Action --> Resolution: Players Complete
    note right of Action
        Each player: 3 actions
        - Deploy new service
        - Repair failed service
        - Scale service capacity
    end note
    
    Resolution --> Chaos: Check Failures
    note right of Resolution
        Check overload conditions
        Roll d20 for cascades
        (‚â§8 triggers cascade)
    end note
    
    Chaos --> Traffic: Next Round
    note left of Chaos
        If entropy ‚â• 3:
        Roll d8 for event type
        Apply system disruption
    end note
    
    Chaos --> [*]: Game Over
#+end_src

*** Detailed Phase Breakdown

**** 1. Traffic Phase
- *Roll 2d10* to generate incoming requests (2-20 requests)
- Requests route through load balancers to services
- Services accumulate load based on requests

**** 2. Action Phase  
- Each player gets 3 actions (simultaneous in digital, turn-based in board)
- Actions cost resources (CPU, Memory, Storage)
- Available actions:
  - *Deploy*: Place new service on empty hex
  - *Repair*: Fix failed/degraded service  
  - *Scale*: Increase service capacity

**** 3. Resolution Phase
- Check each service for overload conditions
- Services fail if load > 2x capacity
- *Roll d20* for cascade checks when services fail
  - Roll ‚â§ 8: Cascade to connected services
  - Roll > 8: Failure contained

**** 4. Chaos Phase
- If entropy ‚â• 3, *roll d8* for chaos event:
  1. Minor glitch
  2. Memory leak
  3. DDoS attack
  4. Config error
  5. Disk full
  6. Network partition
  7. Security breach
  8. Datacenter outage
- Entropy increases based on failures
- Round advances, return to Traffic Phase

*** Victory Conditions

**** Cooperative Mode
- All players win if system uptime stays above 80% for 10 rounds
- All players lose if uptime drops below 50%

**** Competitive Mode  
- Game ends after 10 rounds or total system failure
- Winner has highest score:
  - +1 point per successful request handled
  - +5 points per healthy service owned
  - -10 points per failed service owned

** Core Mechanics

*** Dice System
Each die type represents a different computational concept:

| Die  | Represents          | Usage                           |
|------+--------------------+---------------------------------|
| d20  | Action Resolution  | Service checks, debugging       |
| d12  | Network Latency    | Calculate request delays        |
| d10  | Traffic Load       | Incoming requests per turn      |
| d8   | Chaos Events       | System-wide disruptions         |
| d6   | Resources          | CPU, Memory, Storage allocation |
| d4   | Bug Severity       | Difficulty to fix issues        |

*** Turn Structure
1. *Traffic Phase*: Roll 2d10 for incoming requests
2. *Action Phase*: Each player takes 3 actions
3. *Resolution Phase*: Services handle load or cascade failures
4. *Chaos Phase*: The Static strikes with system-wide events

** Game Components

*** Physical Components
- 43 polyhedral dice (mixed types)
- 140+ tokens and markers
- 30 service tiles (compute, database, cache, queue)
- 60+ event and chaos cards
- 4 character boards with unique abilities
- Network path connectors
- Tracking boards for uptime and chaos

See [[file:docs/components.md][Complete Components List]] for detailed inventory.

*** Character Classes
- *Developer*: Reroll failed service checks
- *Architect*: Create redundant paths efficiently
- *Data Engineer*: Optimize latency across the system
- *DevOps*: Mitigate chaos events

** Educational Value

Pipeline & Peril teaches real distributed systems concepts through play:

- *Reliability Engineering*: Understanding SLAs, uptime, and failure modes
- *System Design*: Building scalable, resilient architectures
- *Incident Management*: Prioritizing fixes under pressure
- *Capacity Planning*: Resource allocation and scaling decisions
- *Chaos Engineering*: Anticipating and handling unexpected failures

** Documentation

- [[file:docs/game-rules.org][üìñ Complete Game Rules]] - Full rulebook with detailed turn structure
- [[file:docs/components.org][üé≤ Components List]] - Complete inventory of all game pieces
- [[file:docs/architecture.org][üèóÔ∏è System Architecture]] - Game flow and system diagrams
- [[file:docs/game-flow.org][üîÑ Game State Machine]] - State diagram of turn progression
- [[file:TODO.org][‚úÖ Development TODO]] - Project roadmap and ideas

** Project Structure

#+begin_src
pipeline-and-peril/
‚îú‚îÄ‚îÄ README.org             # Main documentation  
‚îú‚îÄ‚îÄ INTERFACES.md          # Complete interface documentation
‚îú‚îÄ‚îÄ LICENSE                # MIT License
‚îú‚îÄ‚îÄ TODO.org               # Development roadmap
‚îú‚îÄ‚îÄ digital/               # Digital implementation
‚îÇ   ‚îî‚îÄ‚îÄ pygame/            # PyGame version
‚îÇ       ‚îú‚îÄ‚îÄ src/           
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ engine/    # Core game logic
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ ui/        # PyGame visual interface
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ players/   # AI player implementations
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ integration/ # Web, MCP, Ollama, telemetry
‚îÇ       ‚îú‚îÄ‚îÄ scripts/       # Run scripts
‚îÇ       ‚îî‚îÄ‚îÄ screenshots/   # Game screenshots
‚îú‚îÄ‚îÄ experiments/           # Development experiments
‚îÇ   ‚îú‚îÄ‚îÄ board-simulator.py # Original dice simulator
‚îÇ   ‚îî‚îÄ‚îÄ 001-dice-mechanics/ # Dice testing
‚îú‚îÄ‚îÄ agents/                # Agent architecture
‚îú‚îÄ‚îÄ docs/                  # Game documentation (org-mode)
‚îú‚îÄ‚îÄ playtesting/           # Testing notes and feedback
‚îú‚îÄ‚îÄ scripts/               # Setup utilities
‚îú‚îÄ‚îÄ Makefile               # Build automation (GNU Make)
‚îî‚îÄ‚îÄ pyproject.toml         # Python project configuration
#+end_src

** Quick Start

*** Digital Play Options

**** Interactive CLI
#+begin_src bash
# Quick interactive game vs AI
cd digital/pygame
uv run python scripts/quick_play.py
#+end_src

**** Web Interface
#+begin_src bash
# Browser-based play at http://localhost:5000
uv run python src/integration/web_server.py
#+end_src

**** Visual PyGame
#+begin_src bash
# Full visual experience
uv run python scripts/run_autonomous.py --visual --games 1
#+end_src

**** MCP Server (for Claude)
#+begin_src bash
# Integration with Claude via MCP
uv run python scripts/start_mcp_server.py
#+end_src

See [[file:INTERFACES.md][INTERFACES.md]] for complete documentation of all 7 interfaces.

*** For Contributors
1. Clone the repository
2. Execute =./scripts/setup.sh= to create environment
3. See [[file:TODO.org][TODO.org]] for development roadmap
4. Submit playtesting feedback via GitHub issues

** Development Status

Pipeline & Peril has a complete digital implementation with multiple interfaces:
- [X] Core game engine with dice mechanics (2d10, d20, d8)
- [X] PyGame visual interface with hexagonal grid
- [X] 4 AI strategies (Aggressive, Defensive, Balanced, Random)
- [X] Web interface with REST API
- [X] MCP server for Claude integration
- [X] Ollama integration for LLM players
- [X] Prometheus telemetry and metrics
- [X] Interactive CLI for quick play
- [ ] Physical print-and-play materials
- [ ] Classroom educational materials

** Game Variants

*** Cooperative Mode
All players work together to maintain system uptime above 80% for 10 rounds.

*** Competitive Mode
Players compete for the highest score based on handled requests minus failure penalties.

*** Learning Mode
Simplified rules for classroom use, focusing on specific concepts like load balancing or failure recovery.

** Contributing

We welcome contributions! Areas where help is needed:
- Playtesting and feedback
- Visual design and artwork
- Rules clarification and examples
- Educational materials for classrooms
- Digital implementation ideas

** Philosophy

Pipeline & Peril bridges the gap between abstract systems concepts and tangible understanding. By representing computational challenges as physical dice and tokens, players develop intuition for distributed systems behavior that translates directly to real-world engineering.

The game emphasizes that failure is normal and expected - the challenge isn't preventing all failures, but building systems that gracefully degrade and recover.

** License

This project is open source. See [[file:LICENSE][LICENSE]] file for details.

** Origin Story

Pipeline & Peril was born at RustCon 2025 when we acquired six pairs of RPG dice from a vendor. The tactile nature of rolling physical dice to simulate system events inspired us to create a board game that makes distributed systems concepts tangible and engaging.

** Acknowledgments

Inspired by real-world distributed systems challenges and the belief that complex technical concepts can be made accessible through thoughtful game design. Special thanks to the RustCon 2025 vendor whose dice started this journey.

---

/For the latest updates and discussions, check our [[https://github.com/jwalsh/pipeline-and-peril][GitHub repository]]./