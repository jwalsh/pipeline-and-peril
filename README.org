#+TITLE: Pipeline & Peril
#+AUTHOR: Jason Walsh
#+DESCRIPTION: A board game teaching distributed systems concepts through RPG dice mechanics

[[https://github.com/jwalsh/pipeline-and-peril][https://img.shields.io/badge/GitHub-pipeline--and--peril-181717.svg?logo=github]]
[[https://github.com/jwalsh/pipeline-and-peril/blob/main/LICENSE][https://img.shields.io/badge/License-MIT-yellow.svg]]
[[https://github.com/jwalsh/pipeline-and-peril/issues][https://img.shields.io/github/issues/jwalsh/pipeline-and-peril.svg]]
[[https://github.com/jwalsh/pipeline-and-peril/stargazers][https://img.shields.io/github/stars/jwalsh/pipeline-and-peril.svg?style=social]]
[[https://github.com/jwalsh/pipeline-and-peril/network/members][https://img.shields.io/github/forks/jwalsh/pipeline-and-peril.svg?style=social]]

[[https://img.shields.io/badge/Type-Board_Game-blue.svg]]
[[https://img.shields.io/badge/Category-Educational-green.svg]]
[[https://img.shields.io/badge/Theme-Distributed_Systems-purple.svg]]
[[https://img.shields.io/badge/Mechanics-Dice_Rolling-orange.svg]]
[[https://img.shields.io/badge/Status-In_Development-red.svg]]

* Pipeline & Peril üé≤

/Build resilient distributed systems while battling entropy in this educational board game/

[[https://img.shields.io/badge/Players-2--4-blue.svg]]
[[https://img.shields.io/badge/Time-45--90min-green.svg]]
[[https://img.shields.io/badge/Age-14+-orange.svg]]
[[https://img.shields.io/badge/Complexity-Medium-yellow.svg]]

** Overview

Pipeline & Peril transforms complex distributed systems concepts into engaging tabletop gameplay. Players construct and maintain services while defending against "The Static" - the embodiment of system entropy and chaos.

Using polyhedral RPG dice to simulate real-world computing challenges, players learn about:
- Service architecture and dependencies
- Load balancing and traffic management
- Cascading failures and resilience patterns
- Debugging and incident response
- Chaos engineering principles

** PyGame Implementation

The game is now available as a fully playable PyGame implementation with autonomous AI players and visual interface.

*** Screenshots

**** Initial Game State
[[file:docs/images/pipeline_peril_initial_state.png]]

Four players start with Load Balancers (LB) in the corners of a hexagonal grid. Each player has different strategies: Aggressive (Red), Defensive (Blue), Balanced (Green), and Random (Yellow).

**** Mid-Game Development
[[file:docs/images/pipeline_peril_round_3.png]]

After 3 rounds, the board shows a complex service network with 33 deployed services. Different service types are color-coded: Compute (Green), Database (Blue), Cache (Purple), Queue (Orange), Load Balancer (Red), and API Gateway (Cyan). Player dots show ownership.

**** Debug View
[[file:docs/images/pipeline_peril_debug_view.png]]

Debug mode reveals technical details including service IDs, states, loads, connections (178 total), and performance metrics. This view shows the underlying complexity of the distributed system simulation.

*** Running the Game

#+begin_src bash
cd digital/pygame

# Run autonomous games for analysis
uv run python scripts/run_autonomous.py --games 10 --verbose

# Generate screenshots
uv run python scripts/screenshot_demo.py

# Run with visual interface
uv run python scripts/run_autonomous.py --visual --games 1
#+end_src

*** Game Features

- **4 AI Strategies**: Aggressive, Defensive, Balanced, Random
- **6 Service Types**: Compute, Database, Cache, Queue, Load Balancer, API Gateway  
- **Real-time Visualization**: Hexagonal grid with service states and connections
- **Performance Analytics**: Win rates, uptime statistics, service deployment patterns
- **Chaos Events**: 8 different system-wide disruptions
- **Autonomous Play**: Run 1000+ games for statistical analysis

** Core Mechanics

*** Dice System
Each die type represents a different computational concept:

| Die  | Represents          | Usage                           |
|------+--------------------+---------------------------------|
| d20  | Action Resolution  | Service checks, debugging       |
| d12  | Network Latency    | Calculate request delays        |
| d10  | Traffic Load       | Incoming requests per turn      |
| d8   | Chaos Events       | System-wide disruptions         |
| d6   | Resources          | CPU, Memory, Storage allocation |
| d4   | Bug Severity       | Difficulty to fix issues        |

*** Turn Structure
1. *Traffic Phase*: Roll 2d10 for incoming requests
2. *Action Phase*: Each player takes 3 actions
3. *Resolution Phase*: Services handle load or cascade failures
4. *Chaos Phase*: The Static strikes with system-wide events

** Game Components

*** Physical Components
- 43 polyhedral dice (mixed types)
- 140+ tokens and markers
- 30 service tiles (compute, database, cache, queue)
- 60+ event and chaos cards
- 4 character boards with unique abilities
- Network path connectors
- Tracking boards for uptime and chaos

See [[file:docs/components.md][Complete Components List]] for detailed inventory.

*** Character Classes
- *Developer*: Reroll failed service checks
- *Architect*: Create redundant paths efficiently
- *Data Engineer*: Optimize latency across the system
- *DevOps*: Mitigate chaos events

** Educational Value

Pipeline & Peril teaches real distributed systems concepts through play:

- *Reliability Engineering*: Understanding SLAs, uptime, and failure modes
- *System Design*: Building scalable, resilient architectures
- *Incident Management*: Prioritizing fixes under pressure
- *Capacity Planning*: Resource allocation and scaling decisions
- *Chaos Engineering*: Anticipating and handling unexpected failures

** Documentation

- [[file:docs/game-rules.org][üìñ Complete Game Rules]] - Full rulebook with detailed turn structure
- [[file:docs/components.org][üé≤ Components List]] - Complete inventory of all game pieces
- [[file:docs/architecture.org][üèóÔ∏è System Architecture]] - Game flow and system diagrams
- [[file:docs/game-flow.org][üîÑ Game State Machine]] - State diagram of turn progression
- [[file:TODO.org][‚úÖ Development TODO]] - Project roadmap and ideas

** Project Structure

#+begin_src
pipeline-and-peril/
‚îú‚îÄ‚îÄ README.org          # This file (main documentation)
‚îú‚îÄ‚îÄ LICENSE             # MIT License
‚îú‚îÄ‚îÄ TODO.org            # Development roadmap
‚îú‚îÄ‚îÄ docs/               # Game documentation (all org-mode)
‚îÇ   ‚îú‚îÄ‚îÄ game-rules.org  # Complete rulebook
‚îÇ   ‚îú‚îÄ‚îÄ components.org  # Component inventory
‚îÇ   ‚îú‚îÄ‚îÄ architecture.org # System flow diagrams
‚îÇ   ‚îî‚îÄ‚îÄ game-flow.org   # Turn state machine
‚îú‚îÄ‚îÄ assets/             # Visual assets
‚îÇ   ‚îú‚îÄ‚îÄ tiles/          # Service tile designs
‚îÇ   ‚îî‚îÄ‚îÄ cards/          # Event and chaos cards
‚îú‚îÄ‚îÄ src/                # Python implementation
‚îÇ   ‚îî‚îÄ‚îÄ pipeline_and_peril/
‚îú‚îÄ‚îÄ tests/              # Test suite
‚îú‚îÄ‚îÄ playtesting/        # Testing notes and feedback
‚îú‚îÄ‚îÄ scripts/            # Setup and utility scripts
‚îú‚îÄ‚îÄ Makefile            # Build automation (GNU Make)
‚îî‚îÄ‚îÄ pyproject.toml      # Python project configuration
#+end_src

** Quick Start

*** For Players
1. Download the print-and-play materials from =assets/=
2. Read the rules in [[file:docs/game-rules.org][docs/game-rules.org]]
3. Print character boards and reference cards
4. Gather the required dice (or use a dice app)

*** For Contributors
1. Clone the repository
2. Execute =./scripts/setup.sh= to create any missing directories
3. See [[file:TODO.org][TODO.org]] for development roadmap
4. Submit playtesting feedback via GitHub issues

** Development Status

Pipeline & Peril is in active development. Current focus:
- [ ] Finalizing core mechanics balance
- [ ] Creating print-and-play prototype
- [ ] Playtesting with target audiences
- [ ] Developing visual design language

** Game Variants

*** Cooperative Mode
All players work together to maintain system uptime above 80% for 10 rounds.

*** Competitive Mode
Players compete for the highest score based on handled requests minus failure penalties.

*** Learning Mode
Simplified rules for classroom use, focusing on specific concepts like load balancing or failure recovery.

** Contributing

We welcome contributions! Areas where help is needed:
- Playtesting and feedback
- Visual design and artwork
- Rules clarification and examples
- Educational materials for classrooms
- Digital implementation ideas

** Philosophy

Pipeline & Peril bridges the gap between abstract systems concepts and tangible understanding. By representing computational challenges as physical dice and tokens, players develop intuition for distributed systems behavior that translates directly to real-world engineering.

The game emphasizes that failure is normal and expected - the challenge isn't preventing all failures, but building systems that gracefully degrade and recover.

** License

This project is open source. See [[file:LICENSE][LICENSE]] file for details.

** Acknowledgments

Inspired by real-world distributed systems challenges and the belief that complex technical concepts can be made accessible through thoughtful game design.

---

/For the latest updates and discussions, check our [[https://github.com/jwalsh/pipeline-and-peril][GitHub repository]]./